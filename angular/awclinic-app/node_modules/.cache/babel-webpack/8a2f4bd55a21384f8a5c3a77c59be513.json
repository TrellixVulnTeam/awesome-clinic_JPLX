{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/eugen/awesome-clinic/angular/awclinic-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/material/snack-bar\";\nimport * as i4 from \"@angular/material/form-field\";\nimport * as i5 from \"@angular/material/select\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@angular/material/input\";\nimport * as i8 from \"@angular/material/datepicker\";\nimport * as i9 from \"@angular/material/button\";\nimport * as i10 from \"@angular/material/core\";\nimport * as i11 from \"@angular/material/progress-spinner\";\n\nfunction CreateAppointmentsComponent_mat_option_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const doctor_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", doctor_r5.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", doctor_r5.name, \" \");\n  }\n}\n\nfunction CreateAppointmentsComponent_mat_option_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const branch_r6 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", branch_r6.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", branch_r6.address, \" \");\n  }\n}\n\nfunction CreateAppointmentsComponent_mat_option_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const sp_r7 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", sp_r7.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", sp_r7.name, \" \");\n  }\n}\n\nfunction CreateAppointmentsComponent_mat_spinner_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-spinner\", 14);\n  }\n\n  if (rf & 2) {\n    i0.ɵɵproperty(\"diameter\", 40);\n  }\n}\n\nexport class CreateAppointmentsComponent {\n  constructor(dialogRef, dialog, data, fb, snackBar) {\n    var _this = this;\n\n    this.dialogRef = dialogRef;\n    this.dialog = dialog;\n    this.data = data;\n    this.snackBar = snackBar;\n    this.doctors = [{\n      id: 1,\n      name: \"Eugenio Carrasco\"\n    }, {\n      id: 2,\n      name: \"Ramiro Carrasco\"\n    }];\n    this.specialties = [{\n      id: 1,\n      name: \"Odontologia\"\n    }, {\n      id: 2,\n      name: \"Oncologia\"\n    }];\n    this.branches = [{\n      id: 1,\n      address: \"Manquehue\"\n    }, {\n      id: 2,\n      address: \"Maipu\"\n    }];\n    this.showSpinner = false;\n    this.load_initial = /*#__PURE__*/_asyncToGenerator(function* () {\n      let resultado = yield _this.conn.backend_call(\"api/doctor/\", true, \"DELETE\");\n    });\n    this.parent = data.parent;\n    this.valForm = fb.group({\n      'doctor': ['', Validators.compose([Validators.required])],\n      'specialty': ['', Validators.compose([Validators.required])],\n      'branch': ['', Validators.compose([Validators.required])],\n      'date_appointment': ['', Validators.compose([Validators.required])]\n    });\n  }\n\n  ngOnInit() {}\n\n  submitForm($ev, value) {\n    $ev.preventDefault();\n\n    for (let c in this.valForm.controls) {\n      this.valForm.controls[c].markAsTouched();\n    }\n\n    if (this.valForm.valid) {}\n  }\n\n}\n\nCreateAppointmentsComponent.ɵfac = function CreateAppointmentsComponent_Factory(t) {\n  return new (t || CreateAppointmentsComponent)(i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(i1.MatDialog), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.MatSnackBar));\n};\n\nCreateAppointmentsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CreateAppointmentsComponent,\n  selectors: [[\"app-create-appointments\"]],\n  decls: 29,\n  vars: 7,\n  consts: [[\"mat-dialog-title\", \"\"], [\"mat-dialog-content\", \"\"], [3, \"formGroup\", \"submit\"], [\"appearance\", \"fill\", 1, \"input-form-out\"], [\"formControlName\", \"doctor\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"formControlName\", \"branch\"], [\"formControlName\", \"specialty\"], [\"formControlName\", \"date_appointment\", \"matInput\", \"\", 3, \"matDatepicker\"], [\"matSuffix\", \"\", 3, \"for\"], [\"picker\", \"\"], [\"style\", \"margin-top: 20px;\", 3, \"diameter\", 4, \"ngIf\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 1, \"btn-f-width\", \"btn-separated\", 2, \"margin-top\", \"20px\"], [3, \"value\"], [2, \"margin-top\", \"20px\", 3, \"diameter\"]],\n  template: function CreateAppointmentsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\", 0);\n      i0.ɵɵtext(1, \"Create a new awesome appointment\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"div\", 1);\n      i0.ɵɵelementStart(3, \"form\", 2);\n      i0.ɵɵlistener(\"submit\", function CreateAppointmentsComponent_Template_form_submit_3_listener($event) {\n        return ctx.submitForm($event, ctx.valForm.value);\n      });\n      i0.ɵɵelementStart(4, \"mat-form-field\", 3);\n      i0.ɵɵelementStart(5, \"mat-label\");\n      i0.ɵɵtext(6, \"Doctor\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"mat-select\", 4);\n      i0.ɵɵtemplate(8, CreateAppointmentsComponent_mat_option_8_Template, 2, 2, \"mat-option\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"mat-form-field\", 3);\n      i0.ɵɵelementStart(10, \"mat-label\");\n      i0.ɵɵtext(11, \"Branch Address\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"mat-select\", 6);\n      i0.ɵɵtemplate(13, CreateAppointmentsComponent_mat_option_13_Template, 2, 2, \"mat-option\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"mat-form-field\", 3);\n      i0.ɵɵelementStart(15, \"mat-label\");\n      i0.ɵɵtext(16, \"Medical Specialty\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"mat-select\", 7);\n      i0.ɵɵtemplate(18, CreateAppointmentsComponent_mat_option_18_Template, 2, 2, \"mat-option\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(19, \"mat-form-field\", 3);\n      i0.ɵɵelementStart(20, \"mat-label\");\n      i0.ɵɵtext(21, \"Choose a date\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(22, \"input\", 8);\n      i0.ɵɵelement(23, \"mat-datepicker-toggle\", 9);\n      i0.ɵɵelement(24, \"mat-datepicker\", null, 10);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(26, CreateAppointmentsComponent_mat_spinner_26_Template, 1, 1, \"mat-spinner\", 11);\n      i0.ɵɵelementStart(27, \"button\", 12);\n      i0.ɵɵtext(28, \"Create\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      const _r3 = i0.ɵɵreference(25);\n\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formGroup\", ctx.valForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngForOf\", ctx.doctors);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngForOf\", ctx.branches);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngForOf\", ctx.specialties);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"matDatepicker\", _r3);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"for\", _r3);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.showSpinner);\n    }\n  },\n  directives: [i1.MatDialogTitle, i1.MatDialogContent, i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.FormGroupDirective, i4.MatFormField, i4.MatLabel, i5.MatSelect, i2.NgControlStatus, i2.FormControlName, i6.NgForOf, i2.DefaultValueAccessor, i7.MatInput, i8.MatDatepickerInput, i8.MatDatepickerToggle, i4.MatSuffix, i8.MatDatepicker, i6.NgIf, i9.MatButton, i10.MatOption, i11.MatSpinner],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJjcmVhdGUtYXBwb2ludG1lbnRzLmNvbXBvbmVudC5jc3MifQ== */\"]\n});","map":{"version":3,"sources":["C:\\Users\\eugen\\awesome-clinic\\angular\\awclinic-app\\src\\app\\appointmets\\create-appointments\\create-appointments.component.ts","C:\\Users\\eugen\\awesome-clinic\\angular\\awclinic-app\\src\\app\\appointmets\\create-appointments\\create-appointments.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-create-appointments',\n  templateUrl: './create-appointments.component.html',\n  styleUrls: ['./create-appointments.component.css']\n})\nexport class CreateAppointmentsComponent implements OnInit {\n\n  parent: any;\n  doctors:any[] = [ {id:1, name:\"Eugenio Carrasco\"}, {id:2, name:\"Ramiro Carrasco\"}]\n  specialties:any[] = [ {id:1, name:\"Odontologia\"}, {id:2, name:\"Oncologia\"} ]\n  branches:any[] = [ {id:1, address:\"Manquehue\"}, {id:2, address:\"Maipu\"}]\n  showSpinner:boolean = false;\n  valForm: FormGroup;\n\n  constructor(public dialogRef: MatDialogRef<CreateAppointmentsComponent>, public dialog: MatDialog, @Inject(MAT_DIALOG_DATA) public data: any, fb: FormBuilder, public snackBar: MatSnackBar) {\n    this.parent = data.parent\n\n    this.valForm = fb.group({\n      'doctor': ['', Validators.compose([Validators.required])],\n      'specialty': ['', Validators.compose([Validators.required])],\n      'branch': ['', Validators.compose([Validators.required])],\n      'date_appointment': ['', Validators.compose([Validators.required])],\n    });\n   }\n\n  ngOnInit(): void {\n\n  }\n\n  load_initial = async () =>\n  {\n    let resultado:any = (await this.conn.backend_call(\"api/doctor/\", true, \"DELETE\"))\n  }\n\n  submitForm($ev: any, value: any) {\n    $ev.preventDefault();\n\n    for (let c in this.valForm.controls) {\n        this.valForm.controls[c].markAsTouched();\n    }\n\n    if (this.valForm.valid) \n    {\n      \n    }\n  }\n\n}\n","<h1 mat-dialog-title>Create a new awesome appointment</h1>\n<div mat-dialog-content>\n\n    <form [formGroup]=\"valForm\"  (submit)=\"submitForm($event, valForm.value)\">\n        <mat-form-field appearance=\"fill\" class=\"input-form-out\">\n            <mat-label>Doctor</mat-label>\n            <mat-select formControlName=\"doctor\">\n              <mat-option *ngFor=\"let doctor of doctors\" [value]=\"doctor.id\">\n                {{ doctor.name }}\n              </mat-option>\n            </mat-select>\n        </mat-form-field>\n\n        <mat-form-field appearance=\"fill\" class=\"input-form-out\">\n            <mat-label>Branch Address</mat-label>\n            <mat-select formControlName=\"branch\">\n              <mat-option *ngFor=\"let branch of branches\" [value]=\"branch.id\">\n                {{ branch.address }}\n              </mat-option>\n            </mat-select>\n        </mat-form-field>\n\n        <mat-form-field appearance=\"fill\" class=\"input-form-out\">\n            <mat-label>Medical Specialty</mat-label>\n            <mat-select formControlName=\"specialty\">\n              <mat-option *ngFor=\"let sp of specialties\" [value]=\"sp.id\">\n                {{ sp.name }}\n              </mat-option>\n            </mat-select>\n        </mat-form-field>\n\n        <mat-form-field appearance=\"fill\" class=\"input-form-out\">\n            <mat-label>Choose a date</mat-label>\n            <input formControlName=\"date_appointment\" matInput [matDatepicker]=\"picker\">\n            <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n            <mat-datepicker #picker></mat-datepicker>\n        </mat-form-field>\n\n        <mat-spinner *ngIf=\"showSpinner\" [diameter]=\"40\" style=\"margin-top: 20px;\"></mat-spinner>\n\n        <button mat-raised-button color=\"primary\" type=\"submit\" class=\"btn-f-width btn-separated\" style=\"margin-top: 20px;\">Create</button>\n      </form>\n      \n</div>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}