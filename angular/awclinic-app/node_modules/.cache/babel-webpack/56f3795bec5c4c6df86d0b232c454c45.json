{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/eugen/awesome-clinic/angular/awclinic-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/material/snack-bar\";\nimport * as i3 from \"../connection.service\";\nimport * as i4 from \"@angular/material/card\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@angular/router\";\nimport * as i9 from \"@angular/material/button\";\nimport * as i10 from \"@angular/material/progress-spinner\";\n\nfunction LoginComponent_mat_error_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Username is \");\n    i0.ɵɵelementStart(2, \"strong\");\n    i0.ɵɵtext(3, \"required\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoginComponent_mat_error_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Debe ser un correo electr\\u00F3nico valido \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoginComponent_mat_error_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Password is \");\n    i0.ɵɵelementStart(2, \"strong\");\n    i0.ɵɵtext(3, \"required\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoginComponent_mat_spinner_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-spinner\", 8);\n  }\n\n  if (rf & 2) {\n    i0.ɵɵproperty(\"diameter\", 40);\n  }\n}\n\nexport class LoginComponent {\n  constructor(fb, snackBar, conn) {\n    var _this = this;\n\n    this.snackBar = snackBar;\n    this.conn = conn;\n    this.showSpinner = false;\n    this.disabledButton = false;\n\n    this.submitForm = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* ($ev, value) {\n        $ev.preventDefault();\n\n        for (let c in _this.valForm.controls) {\n          _this.valForm.controls[c].markAsTouched();\n        }\n\n        if (_this.valForm.valid) {\n          let resultado = yield _this.conn.backend_call(\"api/login/\", false, \"POST\", _this.valForm.value);\n          let body_data;\n\n          if (resultado.error) {\n            //body_data = JSON.parse(resultado.error)\n            console.log(resultado.error);\n\n            _this.snackBar.open('Error al iniciar sesion', 'Splash', {\n              horizontalPosition: _this.horizontalPosition,\n              verticalPosition: _this.verticalPosition\n            });\n          } else {\n            _this.conn.set_token(resultado.access);\n          }\n        }\n      });\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    this.valForm = fb.group({\n      'username': ['', Validators.compose([Validators.required])],\n      'password': ['', Validators.compose([Validators.required])]\n    });\n  }\n\n  ngOnInit() {}\n\n}\n\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.MatSnackBar), i0.ɵɵdirectiveInject(i3.ConnectionService));\n};\n\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 26,\n  vars: 6,\n  consts: [[3, \"formGroup\", \"submit\"], [1, \"input-form-out\"], [\"formControlName\", \"username\", \"matInput\", \"\", \"type\", \"text\", \"placeholder\", \"Username\", 1, \"form-input\"], [4, \"ngIf\"], [\"formControlName\", \"password\", \"matInput\", \"\", \"type\", \"password\", \"placeholder\", \"Password\", 1, \"form-input\"], [\"routerLink\", \"/register\", 1, \"btn-f-width\", \"btn-separated\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 1, \"btn-f-width\", \"btn-separated\", 2, \"margin-top\", \"20px\", 3, \"disabled\"], [\"style\", \" margin-top: 20px;\", 3, \"diameter\", 4, \"ngIf\"], [2, \"margin-top\", \"20px\", 3, \"diameter\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"mat-card\");\n      i0.ɵɵelementStart(1, \"mat-card-title\");\n      i0.ɵɵtext(2, \"Login\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"mat-card-subtitle\");\n      i0.ɵɵtext(4, \"Login to access all your benefits\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"form\", 0);\n      i0.ɵɵlistener(\"submit\", function LoginComponent_Template_form_submit_5_listener($event) {\n        return ctx.submitForm($event, ctx.valForm.value);\n      });\n      i0.ɵɵelementStart(6, \"mat-form-field\", 1);\n      i0.ɵɵelement(7, \"input\", 2);\n      i0.ɵɵelementStart(8, \"mat-hint\");\n      i0.ɵɵtext(9, \"Username\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(10, LoginComponent_mat_error_10_Template, 4, 0, \"mat-error\", 3);\n      i0.ɵɵtemplate(11, LoginComponent_mat_error_11_Template, 2, 0, \"mat-error\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"mat-form-field\", 1);\n      i0.ɵɵelement(13, \"input\", 4);\n      i0.ɵɵelementStart(14, \"mat-hint\");\n      i0.ɵɵtext(15, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(16, LoginComponent_mat_error_16_Template, 4, 0, \"mat-error\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(17, \"br\");\n      i0.ɵɵelementStart(18, \"span\");\n      i0.ɵɵtext(19, \" Dont have an account? \");\n      i0.ɵɵelementStart(20, \"a\", 5);\n      i0.ɵɵtext(21, \"Sing up here\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(22, \"br\");\n      i0.ɵɵelementStart(23, \"button\", 6);\n      i0.ɵɵtext(24, \" Login \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(25, LoginComponent_mat_spinner_25_Template, 1, 1, \"mat-spinner\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"formGroup\", ctx.valForm);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.valForm.controls[\"username\"].hasError(\"required\") && (ctx.valForm.controls[\"username\"].dirty || ctx.valForm.controls[\"username\"].touched));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.valForm.controls[\"username\"].hasError(\"username\") && (ctx.valForm.controls[\"username\"].dirty || ctx.valForm.controls[\"username\"].touched));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.valForm.controls[\"password\"].hasError(\"required\") && (ctx.valForm.controls[\"password\"].dirty || ctx.valForm.controls[\"password\"].touched));\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"disabled\", ctx.disabledButton);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.showSpinner);\n    }\n  },\n  directives: [i4.MatCard, i4.MatCardTitle, i4.MatCardSubtitle, i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i5.MatFormField, i1.DefaultValueAccessor, i6.MatInput, i1.NgControlStatus, i1.FormControlName, i5.MatHint, i7.NgIf, i8.RouterLinkWithHref, i9.MatButton, i5.MatError, i10.MatSpinner],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJsb2dpbi5jb21wb25lbnQuY3NzIn0= */\"]\n});","map":{"version":3,"sources":["C:\\Users\\eugen\\awesome-clinic\\angular\\awclinic-app\\src\\app\\login\\login.component.ts","C:\\Users\\eugen\\awesome-clinic\\angular\\awclinic-app\\src\\app\\login\\login.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ConnectionService } from '../connection.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  valForm: FormGroup;\n  showSpinner: boolean = false;\n  disabledButton: boolean = false;\n\n  constructor(fb: FormBuilder, public snackBar: MatSnackBar,public conn: ConnectionService) { \n\n    this.valForm = fb.group({\n      'username': ['', Validators.compose([Validators.required])],\n      'password': ['', Validators.compose([Validators.required])]\n    });\n\n  }\n\n  ngOnInit(): void {\n\n  }\n\n  submitForm = async ($ev: any, value: any) => {\n    $ev.preventDefault();\n\n    for (let c in this.valForm.controls) {\n        this.valForm.controls[c].markAsTouched();\n    }\n\n    if (this.valForm.valid) \n    {\n      let resultado:any = (await this.conn.backend_call(\"api/login/\", false, \"POST\", this.valForm.value))  \n      let body_data;\n\n      if (resultado.error)\n      {\n        //body_data = JSON.parse(resultado.error)\n        console.log(resultado.error)\n        this.snackBar.open('Error al iniciar sesion', 'Splash', {\n          horizontalPosition: this.horizontalPosition,\n          verticalPosition: this.verticalPosition,\n        });\n      }\n      else\n      {\n        this.conn.set_token(resultado.access)\n      }\n    }\n  }\n\n}\n","<mat-card>\n    <mat-card-title>Login</mat-card-title>\n    <mat-card-subtitle>Login to access all your benefits</mat-card-subtitle>\n\n    <form [formGroup]=\"valForm\"  (submit)=\"submitForm($event, valForm.value)\">\n        <mat-form-field class=\"input-form-out\"> \n            <input formControlName=\"username\" matInput type=\"text\" class=\"form-input\" placeholder=\"Username\">\n    \n            <mat-hint>Username</mat-hint>\n    \n            <mat-error *ngIf=\"valForm.controls['username'].hasError('required') && (valForm.controls['username'].dirty || valForm.controls['username'].touched)\">\n              Username is <strong>required</strong>\n            </mat-error>\n    \n            <mat-error *ngIf=\"valForm.controls['username'].hasError('username') && (valForm.controls['username'].dirty || valForm.controls['username'].touched)\">                                          Debe ser un correo electrónico valido\n            </mat-error>\n        </mat-form-field>\n    \n        <mat-form-field class=\"input-form-out\">\n            <input formControlName=\"password\" matInput type=\"password\" class=\"form-input\" placeholder=\"Password\">\n    \n            <mat-hint>Password</mat-hint>\n    \n            <mat-error *ngIf=\"valForm.controls['password'].hasError('required') && (valForm.controls['password'].dirty || valForm.controls['password'].touched)\">\n              Password is <strong>required</strong>\n            </mat-error>\n        </mat-form-field>\n    \n        <br>\n        <span> Dont have an account? <a class=\"btn-f-width btn-separated\"  routerLink=\"/register\">Sing up here</a> </span>\n\n        <br>\n    \n        <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"disabledButton\" class=\"btn-f-width btn-separated\" style=\"margin-top: 20px;\"> Login </button>\n    \n        <mat-spinner *ngIf=\"showSpinner\" [diameter]=\"40\" style=\" margin-top: 20px;\"></mat-spinner>\n      </form>\n\n</mat-card>\n\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}