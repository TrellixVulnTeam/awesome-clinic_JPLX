{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/eugen/awesome-clinic/angular/awclinic-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../connection.service\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/material/snack-bar\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/select\";\nimport * as i7 from \"@angular/common\";\nimport * as i8 from \"@angular/material/input\";\nimport * as i9 from \"@angular/material/datepicker\";\nimport * as i10 from \"@angular/material/button\";\nimport * as i11 from \"@angular/material/core\";\nimport * as i12 from \"@angular/material/progress-spinner\";\n\nfunction CreateAppointmentsComponent_mat_option_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const doctor_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", doctor_r5.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", doctor_r5.name, \" \");\n  }\n}\n\nfunction CreateAppointmentsComponent_mat_option_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const branch_r6 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", branch_r6.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", branch_r6.address, \" \");\n  }\n}\n\nfunction CreateAppointmentsComponent_mat_option_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const sp_r7 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", sp_r7.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", sp_r7.name, \" \");\n  }\n}\n\nfunction CreateAppointmentsComponent_mat_spinner_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-spinner\", 14);\n  }\n\n  if (rf & 2) {\n    i0.ɵɵproperty(\"diameter\", 40);\n  }\n}\n\nexport let CreateAppointmentsComponent = /*#__PURE__*/(() => {\n  class CreateAppointmentsComponent {\n    constructor(conn, dialogRef, dialog, data, fb, snackBar) {\n      var _this = this;\n\n      this.conn = conn;\n      this.dialogRef = dialogRef;\n      this.dialog = dialog;\n      this.data = data;\n      this.snackBar = snackBar;\n      this.doctors = [{\n        id: 1,\n        name: \"Eugenio Carrasco\"\n      }, {\n        id: 2,\n        name: \"Ramiro Carrasco\"\n      }];\n      this.specialties = [{\n        id: 1,\n        name: \"Odontologia\"\n      }, {\n        id: 2,\n        name: \"Oncologia\"\n      }];\n      this.branches = [{\n        id: 1,\n        address: \"Manquehue\"\n      }, {\n        id: 2,\n        address: \"Maipu\"\n      }];\n      this.showSpinner = false;\n      this.load_initial = /*#__PURE__*/_asyncToGenerator(function* () {\n        let resultado = yield _this.conn.backend_call(\"api/doctor/\", false, \"GET\");\n        _this.doctors = resultado;\n        let resultado_sp = yield _this.conn.backend_call(\"api/specialty/\", false, \"GET\");\n        _this.specialties = resultado_sp;\n        let resultado_b = yield _this.conn.backend_call(\"api/branch/\", false, \"GET\");\n        _this.branches = resultado_b;\n      });\n\n      this.submitForm = /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* ($ev, value) {\n          $ev.preventDefault();\n\n          for (let c in _this.valForm.controls) {\n            _this.valForm.controls[c].markAsTouched();\n          }\n\n          if (_this.valForm.valid) {\n            let data = _this.valForm.value;\n            let date_app = data[\"date_appointment\"];\n            let format_date = date_app.getFullYear() + \"-\" + date_app.getMonth() + \"-\" + date_app.getDate() + \" \" + date_app.getHours() + \":\" + date_app.getMinutes() + \":00\";\n            data[\"date_appointment\"] = format_date;\n            let resultado = yield _this.conn.backend_call(\"api/appointment/\", true, \"POST\", data);\n\n            if (resultado.error) {\n              _this.snackBar.open('Please login again', 'Close');\n\n              _this.conn.remove_token();\n\n              _this.parent.router.navigate([\"login\"]);\n\n              _this.dialogRef.close();\n            }\n\n            _this.snackBar.open('Appointment created', 'Close');\n\n            _this.parent.load_data();\n\n            _this.dialogRef.close();\n          }\n        });\n\n        return function (_x, _x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n\n      this.parent = data.parent;\n      this.valForm = fb.group({\n        'doctor_id': ['', Validators.compose([Validators.required])],\n        'specialty_id': ['', Validators.compose([Validators.required])],\n        'branch_id': ['', Validators.compose([Validators.required])],\n        'date_appointment': ['', Validators.compose([Validators.required])]\n      });\n    }\n\n    ngOnInit() {\n      this.load_initial();\n    }\n\n  }\n\n  CreateAppointmentsComponent.ɵfac = function CreateAppointmentsComponent_Factory(t) {\n    return new (t || CreateAppointmentsComponent)(i0.ɵɵdirectiveInject(i1.ConnectionService), i0.ɵɵdirectiveInject(i2.MatDialogRef), i0.ɵɵdirectiveInject(i2.MatDialog), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i4.MatSnackBar));\n  };\n\n  CreateAppointmentsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CreateAppointmentsComponent,\n    selectors: [[\"app-create-appointments\"]],\n    decls: 29,\n    vars: 7,\n    consts: [[\"mat-dialog-title\", \"\"], [\"mat-dialog-content\", \"\"], [3, \"formGroup\", \"submit\"], [\"appearance\", \"fill\", 1, \"input-form-out\"], [\"formControlName\", \"doctor_id\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"formControlName\", \"branch_id\"], [\"formControlName\", \"specialty_id\"], [\"formControlName\", \"date_appointment\", \"matInput\", \"\", 3, \"matDatepicker\"], [\"matSuffix\", \"\", 3, \"for\"], [\"picker\", \"\"], [\"style\", \"margin-top: 20px;\", 3, \"diameter\", 4, \"ngIf\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 1, \"btn-f-width\", \"btn-separated\", 2, \"margin-top\", \"20px\"], [3, \"value\"], [2, \"margin-top\", \"20px\", 3, \"diameter\"]],\n    template: function CreateAppointmentsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h1\", 0);\n        i0.ɵɵtext(1, \"Create a new awesome appointment\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", 1);\n        i0.ɵɵelementStart(3, \"form\", 2);\n        i0.ɵɵlistener(\"submit\", function CreateAppointmentsComponent_Template_form_submit_3_listener($event) {\n          return ctx.submitForm($event, ctx.valForm.value);\n        });\n        i0.ɵɵelementStart(4, \"mat-form-field\", 3);\n        i0.ɵɵelementStart(5, \"mat-label\");\n        i0.ɵɵtext(6, \"Doctor\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"mat-select\", 4);\n        i0.ɵɵtemplate(8, CreateAppointmentsComponent_mat_option_8_Template, 2, 2, \"mat-option\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"mat-form-field\", 3);\n        i0.ɵɵelementStart(10, \"mat-label\");\n        i0.ɵɵtext(11, \"Branch Address\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"mat-select\", 6);\n        i0.ɵɵtemplate(13, CreateAppointmentsComponent_mat_option_13_Template, 2, 2, \"mat-option\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"mat-form-field\", 3);\n        i0.ɵɵelementStart(15, \"mat-label\");\n        i0.ɵɵtext(16, \"Medical Specialty\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"mat-select\", 7);\n        i0.ɵɵtemplate(18, CreateAppointmentsComponent_mat_option_18_Template, 2, 2, \"mat-option\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"mat-form-field\", 3);\n        i0.ɵɵelementStart(20, \"mat-label\");\n        i0.ɵɵtext(21, \"Choose a date\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(22, \"input\", 8);\n        i0.ɵɵelement(23, \"mat-datepicker-toggle\", 9);\n        i0.ɵɵelement(24, \"mat-datepicker\", null, 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(26, CreateAppointmentsComponent_mat_spinner_26_Template, 1, 1, \"mat-spinner\", 11);\n        i0.ɵɵelementStart(27, \"button\", 12);\n        i0.ɵɵtext(28, \"Create\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        const _r3 = i0.ɵɵreference(25);\n\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"formGroup\", ctx.valForm);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", ctx.doctors);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", ctx.branches);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", ctx.specialties);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"matDatepicker\", _r3);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"for\", _r3);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.showSpinner);\n      }\n    },\n    directives: [i2.MatDialogTitle, i2.MatDialogContent, i3.ɵNgNoValidate, i3.NgControlStatusGroup, i3.FormGroupDirective, i5.MatFormField, i5.MatLabel, i6.MatSelect, i3.NgControlStatus, i3.FormControlName, i7.NgForOf, i3.DefaultValueAccessor, i8.MatInput, i9.MatDatepickerInput, i9.MatDatepickerToggle, i5.MatSuffix, i9.MatDatepicker, i7.NgIf, i10.MatButton, i11.MatOption, i12.MatSpinner],\n    styles: [\"\"]\n  });\n  return CreateAppointmentsComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}